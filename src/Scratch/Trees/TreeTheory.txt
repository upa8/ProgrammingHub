				****** TREEE Notes *******
Index :
 
1) Binary Tree :
	1.1) Types of Binary Tree 
	1.2) Enumeration of binary tree 
	1.3) Applications of Tree data structure 
	1.4) Properties of binary tree  
2) Tree Traversal Algorithms 
	2.1) In-order 
	2.2) Pre-Order
	2.3) Post-Order
	2.4) Level-Order
	2.5) Spiral- Order 
3) Binary Search Tree 
4) Segment Tree 
5) Fenwik Tree 

6) Red Black Tree

7) Splay Tree

8) Persistent Tree

9) AVL Tree
	It is a binary search tree in which difference between height of left 
	subtree and right subtree is less than 1 . 
	
10) Trie 

11) Suffix Array 

12) Prefix Array 

13) QuadTree

14) Binary Heap 

Solutions To Most Polular Questions On Tree : 
1) Heigth Of Binary Tree .
2) Size  of  Binary Tree  .
3) Binary Tree Insertion .
4) Binary Search Algorithm .
5) Root to leaf Sum .
6) Is a Binary Tree or Binary Search Tree .  
7) Largest BST in Binary Tree 
Complexity Chart 
-------------------------------------------------------------------------------
					1)	Binary Tree  
					****************
	1.1) Types of binary tree 
------------------------------------------------------------------------------------------
	Online Resource : 
		http://geeksquiz.com/binary-tree-set-3-types-of-binary-tree/
	
	1) Strict Binary Tree
		If every node has either two  . 
	2) Full Binary Tree
		If every leaf node has exactly two children or 0 children 
	3) Complete Binary Tree
		If all leaf nodes are at height H or H-1
		A Binary Tree is complete Binary Tree if all levels are completely 
		filled except possibly the last level and the last level has all 
		keys as left as possible
	4) Balance Binary Tree: 
		A binary tree is balanced if height of the tree is O(Log n) where n 
		is number of nodes. For Example, AVL tree maintain O(Log n) height 
		by making sure that the difference between heights of left and right 
		subtrees is 1. Red-Black trees maintain O(Log n) height by making sure
		that the number of Black nodes on every root to leaf paths are same
        and there are no adjacent red nodes. Balanced Binary Search trees
        are performance wise good as they provide O(log n) time for search, 
        insert and delete .
	5) Degenerated Tree : 
		A tree where every internal node has only 1 child , such trees are 
		performance wise same as linked list .	
-------------------------------------------------------------------------------
	1.2) Enumeration Of Binary Trees
		1) How many different unlabeled tree can be there with n node . 
			T(n) = (2n)!/(n+1)!*n!
			This is called as catalan number . 
			Number of binary trees with n node is also same as that unlabeled 
			trees.
		2) How many different labeled tree can be there with n nodes. 
			T(n) = T(n) = ((2n)!/(n+1)!*n!)*n!
-------------------------------------------------------------------------------			 
	1.3) Applications of Tree Data Structure
		1) Hierarchy 
		2) Router algorithms 
-------------------------------------------------------------------------------
	
    1.4) Properties Of Binary Tree
    
    1) In full binary tree , if h is the height of tree then ((2^h+1)-1) is the
     	number of nodes in that tree . 
    2) In complete binary tree , 
    	1) Minimum number of nodes are 2^h
    	2) Maximum number of nodes are ((2^h+1)-1)
    3) Number of leaf nodes in full binary tree are 2^h
    4) Number of Null Links (Wasted Pointers) in complete binary tree of 
    	n nodes is n+1

-------------------------------------------------------------------------------
			2) Tree Traversal Algorithms 
			****************************

	2.1) InOrder 
		
		Iterative :
		
		Recursive :
		 
	2.2) PreOrder
		
		Iterative :
		 
		Recursive :
		 
	2.3) PostOrder
		
		Iterative :
		 
		Recursive :
		
	2.4) Level Order
		
		Iterative :
		 
		Recursive :
	2.5) Spiral Order : 
		Iterative : 
		
		Recursive :  
	
	
-------------------------------------------------------------------------------		  
				3) Binary Search Tree
				********************* 
	Operations : 
		1) Creation of Binary Search Tree 
		2) Insertion into Binary Search Tree
		3) Deletion from Binary Search Tree
		4) Searching from Binary Search Tree 
		
	Time Complexities : 
	1) Insertion : 
		In average case o(log n) . In worst case 0(n^2) . 
	2) Search : 
		In average case o(log n) . In worst case 0(n^2) .
	3) Deletion : 
	
	4) Creation : 
		If there are n elements , if we do not know element before hand then 
		we will have to do 'n' insertions to create the tree . 
		If we already know the elements , then an efficient approach is to 
		sort this elements in  nlogn  . Select middle element as a root . 
		And then insert element from left and right to create Binary 
		Search Tree . It will have advantage like , balanced tree . 
		This approach will improve performance of searching in tree as 
		the tree is balanced so height will be minimum here . 
		In average case 0(nlog n) . In worst case 0( n^2 ) .
		
	  
-------------------------------------------------------------------------------
				4) Segment Tree :
-------------------------------------------------------------------------------
	Online Resource : 
	https://www.youtube.com/watch?v=ZBHKZF5w4YU&list=PLrmLmBdmIlpv_jNDXtJGYTPNQ
	2L1gdHxu&index=8&ab_channel=TusharRoy
	1)If array size is power of 2 , then size of segment tree will be
	arraylength*2 -1. 
	2) If array size is not power of 2 , then we find next power of two ,
	greater than the number and do the same 
	newPowerOfTwo * 2 -1 
	3) Left child  2 * i + 1
	   Right child 2 * i + 2
	   Parent      (i - 1)/2
	4) Lazy Propogation in segment tree . 
		Video : 
		https://www.youtube.com/watch?v=xuoQdt5pHj0&list=PLrmLmBdmIlpv_jNDXtJGY
		TPNQ2L1gdHxu&index=3&ab_channel=TusharRoy
		
		It is technique which is used to update segment tree in more optimized 
		way . 

5) Fenwik Tree : 
	Video : 
	https://www.youtube.com/watch?v=CWDQJGaN1gY&ab_channel=TusharRoy
	
	

6) Red Black Tree

7) Splay Tree

8) Persistent Tree

9) AVL Tree
	Video : https://www.youtube.com/watch?v=rbg7Qf8GkQ4&list=PLrmLmBdmIlpv_
	jNDXtJGYTPNQ2L1gdHxu&index=7&ab_channel=TusharRoy
	
	
	It is a binary search tree in which difference between height of left 
	subtree and right subtree is less than 1 . This is balanced binary search
	tree .
	
	Every insertion operation in AVL tree takes logn time . So to create an 
	AVL tree from an array of elements n will take nlogn time . Also rotations 
	in AVL tree are of o(1) . 
	
	Refference to this : 
	http://stackoverflow.com/questions/17629668/difference-between-the-time-
	complexity-required-to-build-binary-search-tree-and
	
	
	AVL Tree Insertion : 
		There are four cases of this 
			1) LEFT LEFT 
			2) LEFT RIGHT 
			3) RIGHT LEFT 
			4) RIGHT RIGHT 
	AVL Tree Deletion :  
	
	
	Time Complexities : 
		1) Insertion : O(log n)
		2) Deletion : O(log n) 
		3) Search : O(log n) 
	 
	
10) Trie 

11) Suffix Array 

12) Prefix Array 

13) QuadTree

14) Binary Heap 





-------------------------------------------------------------------------------
Solutions to most Popular Questions  On Tree : 

1) Height Of  Binary Tree : 
	Online Source : 
		https://www.youtube.com/watch?v=ZM-sV9zQPEs&index=22&list=PLrmLmBdmIlp
		v_jNDXtJGYTPNQ2L1gdHxu&ab_channel=TusharRoy
		
	Solution in short : 
		public int height(Node root) {
				if (root == null) {
					return 0;
				}
				int leftHeight = this.height(root.left);
				int rightHeight = this.height(root.right);
				return Math.max(leftHeight, rightHeight) + 1;
		}
		
2) Size of Binary tree  : 
		public int size(Node root) {
				if (root == null) {
					return 0;
				}
				int leftSize = this.size(root.left);
				int rightSize = this.size(root.right);
				return (leftSize, leftSize + 1);
		}
		Size of tree means total number trees present in the tree. 
3) Binary Tree Insertion : 
		
		
		public Node addNode(int data, Node head) {
				Node tempHead = head;
				Node n = Node.newNode(data);
				if (head == null) {
					head = n;
					return head;
				}
				Node prev = null;
				while ( head != null ) {
					prev = head;
					if (head.data < data) {
						head = head.right;
					} else {
						head = head.left;
					}
				}
				if (prev.data < data) {
					prev.right = n;
				} else {
					prev.left = n;
				}
				return tempHead;
			}
		
	

		Time complexity : 
			worst case : o(n)
			
		

4) Binary Search Algorithm : 
		 public Node search(Node root, int key){
		        if(root == null){
		            return null;
		        }
		        if(root.data == key){
		            return root;
		        }else if(root.data < key){
		            return search(root.right, key);
		        }else{
		            return search(root.left, key);
		        }
    	}
    	
    	 * Youtube link - https://youtu.be/zm83jPHZ-jA
  
		  Given a binary search tree and a key, return node which has data as this key or return
		  null if no node has data as key.
		  
		  Solution 
		  Since its BST for every node check if root.data is key and if not go either left or
		  right depending on if root.data is greater or less than key
		  
		  Time complexity is O(n) for non balanced BST
		  Time complexity is O(logn) for balanced BST
  
	  Test cases:
	  1) null tree
	  2) Tree with one node and key is that node
	  3) Tree with many nodes and key does not exist
	  4) Tree with many nodes and key exists
	  
5) Root to leaf Sum Binary Tree : 
		Online Resource : 
		https://www.youtube.com/watch?v=Jg4E4KZstFE&list=PLrmLmBdmIlpv_jNDXtJGYTPNQ2L1gdHxu&index=17&ab_channel=TusharRoy
		
		public boolean printPath(Node root, int sum, List<Node> path){
	        if(root == null){
	            return false;
	        }
	
	        if(root.left == null && root.right == null){
	            if(root.data == sum){
	                path.add(root);
	                return true;
	            }else{
	                return false;
	            }
	        }
	        if(printPath(root.left, sum-root.data, path) || printPath(root.right, sum - root.data, path)){
	            path.add(root);
	            return true;
	        }
	        return false;
	    }
6)	Is Binary Tree or Binary Search Tree . 
		Online Resources: 
		This is recursive Solution : 
		https://www.youtube.com/watch?v=MILxfAbIhrE&list=PLrmLmBdmIlpv_jNDXtJGYTPNQ2L1gdHxu&index=16&ab_channel=TusharRoy

		    public boolean isBST(Node root){
     			   return isBST(root, Integer.MIN_VALUE, Integer.MAX_VALUE);
    		}
    
		    private boolean isBST(Node root, int min, int max){
		        if(root == null){
		            return true;
		        }
		        if(root.data <= min || root.data > max){
		            return false;
		        }
		        return isBST(root.left, min, root.data) && isBST(root.right, root.data, max);
		    }
		    
		   Iterative Solution : 
		   
		   public boolean isBSTIterative(Node root) {
				if (root == null) {
					return true;
				}
				Deque<Node> stack = new LinkedList<Node>();
				Node node = root;
				int prev = node.data;
				int current = 0;
				while ( true ) {
					if (node != null) {
						stack.addFirst(node);
						node = node.left;
					} else {
						if (stack.isEmpty()) {
							break;
						}
						node = stack.pollFirst();
						current = node.data;
						prev = node.data;
						node = node.right;
						if (current > prev) {
							return false;
						}
					}
				}
				return true;
			}
				   
	There are four methods to solve this problem 
	Geeksforgeeks Link
	http://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/
	
	Best approach is , do in-order traversal of the tree , Check whether 
	the sequence found in this traversal is in ascending order or not . 
	No need to store this sequence in an array , just store the previous
	value and compare it with current value . If current value is greater
	than previous value then go forward , otherwise return false . 
	
7) Largest Binary Search Tree in Binary Tree 
	Video : 
		https://www.youtube.com/watch?v=4fiDs7CCxkc&index=4&list=PLrmLmBdmIlpv_
		jNDXtJGYTPNQ2L1gdHxu&ab_channel=TusharRoy 
		
	

To Do List : 
1) Write all proper output for TreeTraversals 
2) Program for Diameter of Binary Tree
3) Level Order Traversal 
4) Level Order Traversal In Reverse
5) Boundary Traversal 
6) Find Maximum element in Binary Tree with and without recursion . 
7) Give an algorithm for searching an element in Binary Tree with and without recursion 
8) Algorithm to find size of binary tree with and without recursion 
9) Algorithm to delete the tree .
10) Algorithm to find depth and height of tree. 


Currently Working on 
1) Segment Tree 
2) AVL Tree 
3) Red Black Tree
4) Fenweek Tree 


Complexity Chart 
-------------------------------------------------------------------------------
Tree             Insertion  Deletion  Search  Creation  


