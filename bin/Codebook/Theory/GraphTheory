Graph Theory :

Graph Representation : 
	1) Adjacency Matrix 
	2) Adjacency List 
	3) Edge List 

 
Graph Traversal : 
	   What can we do by simply traversing the graph : 
	   
		1) DFS (Depth First Search )  
			This algorithm uses stack . 
			Time complexity is (V+E).
			
			
		2) BFS (Breadth First Search )
			This algorithm uses queue .
			Time complexity is (V+E).
			We can find the layers using this algorithm . 
			This algorithm can be useful for breadth first search shortest distance or path , 
			it will be a greedy algorithm . But this can be useful for finding shortest 
			distance from a given point to all the points in the graph . 
			
		3) Finding Connected Components in a graph . 
			User dfs , and check wherether all vertices are visited or not , 
			if any vertex is not visited , then again go for dfs from that 
			vertex . In this way we will get all the connected components . 
		4) Flood Fill - Labeling / Coloring the connected components . 
			This algorithm is used to color the components of the graph . 
			Connected components will be colored as same . 
			Now increase the color number for next connected component . 
			For next connected components we will use that increased color code . 
			In this way we will cover all the connected components . 
			We can use dfs to traverse the graph and find the connected components of graph . 
			Implement this algorithm in java from Competitive Programming by steven and Felix .
		5) Topological Sorting 
			1) Make sure that graph is directed acyclic graph 
			2) There can be many answers of topological sorting , means there can be many 
				order sequences of topological sorting for a particular graph .
			3) This algorithm can be useful in many real life applications , like course
				selection system in universities etc . 
			4) One application of topological sorting is to find a possible sequence of modules that a University
				student has to take to fulfill his graduation requirement. Each module has certain pre-requisites
				to be met. This pre-requisites can be modeled as a DAG. Topological sorting this module prerequisites DAG gives the student a linear list of modules to be taken one after another without
				violating the pre-requisites constraint.
			5) This topological sorting is just application of dfs algorithm . 
		
		6) Bipartitie Graph Check .
		
		
		7) Graph Edges Property Check using DFS Spanning Tree .
		
		8) Finding articulation points and bridges ( in undirected Graph ).
		
		9) Finding Strongly Connected Components in graph . 
			(Input graph should be Directed Acylic Graph ) 
		
Minimum Spanning Tree : MST
	1) Kruskal's Algorithm : 
		This algorithm first sorts all the edges in acending order and 
		stores this in edge list data structure . 
		Now , we select the smallest edge and add this is one set , then we 
		select next edge and check whether it creates a cycle or not using 
		light weight union find disjoint set , if not then we connect that edge 
		, this is greedy algorithm . In this way we find the Minimum cost 
		required to reach all the vertices in a graph . 
		Complexity of this algorithm is (E log V). 
			Calculate complexity of this algorithm : 
			1) Sorting the Edges + Adding each edge * checking cycle using union find disjoint set 
			
			Sorting the edges takes (E logE) in edge list data structure . 
			Adding each edge * cycle checking  = E*1
			Total is E log E + E = ElogE (Neglecting E ) . 
			Maximum number of edges will be V^2 . 
			Hence E log E = E log V^2 = 2* ElogV  = E log V. 
	2) Prim's Algorithm : 
		This is simple algorithm which first takes a vertex (Say we want a MST 
		from a particular vertex) . Now , we mark this vertex as visited and 
		store all the adjacent vertices into the priority queue with their weights. 
		Now we select the edge with least value of weight , and connect it to the our vertex . 
		Now , we again add the adjacent vertex of this newly added vertex into the priority 
		queue . This time we select the edge and check whether it creates a cycle or not by just
		checking its flag whether it has been visited before or not . If not then we 
		add that edge . And repeat the process until we add V-1 edges to our mst . Becasue 
		every mst will have V-1 edges to it . 
	3) Applications of this MST 
		1) Maximum Spanning Tree : 
			1) Simple use the krushkal algorithm, in this algorithm , instead 
			of sorting the edge list in increasing order , sort them in decreasing order . 
		2) Partial 'Minimum' Spanning Tree . 
			1) Some of the edges are already fixed and necessary , now we have to find the mst
			assuming that selected edges are necessary . So , first add those edges into 
			our krushkal algorithm and then apply the algorithm for remainng edges . 
		3) Minimum Spanning Forest : 
			1) In this type of problems , we are given the number of 
			components to be connected to create the minimum spanning tree . So , 
			run the krushkal algorithm until we reach to the give number of 
			necessary connected components . 
		4) Second Best Spanning Tree : 
			First create a MST using krushkal algorithm , and just skipp to add v-1 edge from 
			edge list . Select the next minimum weight edge . We will get the second best minimum 
			spanning tree . 
		5) Minimax (and Maximin) (Important ... Implement this ) . 
			Create a minimum spanning tree using kruskal algorithm . Now traverse the 
			spanning tree for the given vertex i and j . Now calculate the cost . This is 
			simple problem in which we have to create minimum spanning tree . After that 
			we have to find the minimum path cost between two vertex i and j . 

Shortest Path : 
	1) Single Source Shortest Path . 		
	
	
	
	
	
	
	
Intermidiate Algorithms which will be used in solving graph problems . 
	1) Union find disjoint set Algorithm .	
	
	

Algorithms : 
1) DFS                Done
2) BFS 				  Done
3) Prim's 
4) Kruskal 
5) Dijkstra's 
6) Wornocks 
7) Painters 
8) Bellaman Ford's 
9) Floyd Warshal Algorithm 
10) Robort Endre Tarjan's Algorithm (Modified dfs for topological sorting )  
11) Edmonds Karp's Algorithm 
12) Ford Fulkerson 
13) Maximum Cardinality Bipartitie Matching Algorithm (MCMB) 
14) Boruvka Algorithm 
15) Min arborescence Algorithm 
16) Johnson Algorithm 
17) Adjacecny Matrix     
18) Adjacecny  List 
19) Edge List 